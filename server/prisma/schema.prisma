generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int        @id @default(autoincrement())
  lastName                      String
  createdAt                     DateTime   @default(now())
  firstName                     String?    @db.VarChar(50)
  email                         String?    @unique
  intraId                       Int?
  TwoFA                         Boolean?   @default(false)
  twoFactorAuthenticationSecret String?
  level                         Int?       @default(0)
  avatar                        String?
  connected                     Boolean?   @default(false)
  xp                            Int?       @default(0)
  userName                      String?
  achievements                  String[]
  inGame                        Boolean?   @default(false)
  lose                          Int?       @default(0)
  win                           Int?       @default(0)
  blockedBy                     Blocked[]  @relation("Blocked_blocked")
  blocked                       Blocked[]  @relation("Blocked_users")
  friendOf                      Friend[]   @relation("Friend_friends")
  friends                       Friend[]   @relation("Friend_users")
  gamesAsPlayer1                Game[]     @relation("Player1ToGame")
  gamesAsPlayer2                Game[]     @relation("Player2ToGame")
  gamesWon                      Game[]     @relation("WinnerToGame")
  messages                      Message[]
  adminInChatRooms              ChatRoom[] @relation("chatroomAdmin")
  bannedInChatRooms             ChatRoom[] @relation("chatroomBannedUsers")
  mutedInChatRooms              ChatRoom[] @relation("chatroomMutedUsers")
  chatRooms                     ChatRoom[] @relation("chatroomUser")
}

model Game {
  id               Int       @id @default(autoincrement())
  player1Id        Int
  player2Id        Int
  scorePlayer1     Int       @default(0)
  scorePlayer2     Int       @default(0)
  startedAt        DateTime?
  endedAt          DateTime?
  winnerId         Int?
  waiting          Boolean   @default(true)
  waitingForPlayer Boolean?  @default(true)
  player1          User      @relation("Player1ToGame", fields: [player1Id], references: [id])
  player2          User      @relation("Player2ToGame", fields: [player2Id], references: [id])
  winner           User?     @relation("WinnerToGame", fields: [winnerId], references: [id])
}

model ChatRoom {
  id          Int       @id @default(autoincrement())
  name        String?
  createdAt   DateTime  @default(now())
  password    String?
  messages    Message[]
  admins      User[]    @relation("chatroomAdmin")
  bannedUsers User[]    @relation("chatroomBannedUsers")
  mutedUsers  User[]    @relation("chatroomMutedUsers")
  users       User[]    @relation("chatroomUser")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  userId     Int
  chatRoomId Int
  createdAt  DateTime @default(now())
  event      String?
  isInvite   Boolean?
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
  id       Int      @id @default(autoincrement())
  userId   Int
  friendId Int
  accepted Boolean?
  pending  Boolean? @default(true)
  friend   User     @relation("Friend_friends", fields: [friendId], references: [id])
  user     User     @relation("Friend_users", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model Blocked {
  id        Int  @id @default(autoincrement())
  userId    Int
  blockedId Int
  blocked   User @relation("Blocked_blocked", fields: [blockedId], references: [id])
  user      User @relation("Blocked_users", fields: [userId], references: [id])

  @@unique([userId, blockedId])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
