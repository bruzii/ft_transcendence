generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int        @id @default(autoincrement())
  lastName                      String
  createdAt                     DateTime   @default(now())
  firstName                     String?    @db.VarChar(50)
  email                         String?    @unique
  intraId                       Int?
  TwoFA                         Boolean?   @default(false)
  twoFactorAuthenticationSecret String?
  level                         Int?       @default(0)
  avatar                        String?
  connected                     Boolean?   @default(false)
  xp                            Int?       @default(0)
  userName                      String?
  achievements                  String[]
  inGame                        Boolean?   @default(false)
  lose                          Int?       @default(0)
  win                           Int?       @default(0)
  blockedBy                     Blocked[]  @relation("Blocked_blocked")
  blocked                       Blocked[]  @relation("Blocked_users")
  friendOf                      Friend[]   @relation("Friend_friends")
  friends                       Friend[]   @relation("Friend_users")
  messages                      Message[]
  chatRooms                     ChatRoom[] @relation("chatroomUser")
  adminInChatRooms              ChatRoom[]  @relation("chatroomAdmin")
  bannedInChatRooms           ChatRoom[]  @relation("chatroomBannedUsers")
  mutedInChatRooms            ChatRoom[]  @relation("chatroomMutedUsers")
  gamesAsPlayer1              Game[] @relation("Player1ToGame")
  gamesAsPlayer2              Game[] @relation("Player2ToGame")
  gamesWon                    Game[] @relation("WinnerToGame")
}

model Game {
  id        Int      @id @default(autoincrement())
  player1Id Int
  player2Id Int
  waiting    Boolean @default(true)
  scorePlayer1 Int @default(0)
  scorePlayer2 Int @default(0)
  waitingForPlayer  Boolean? @default(true)
  startedAt  DateTime   @default(now())
  endedAt    DateTime?
  winnerId   Int?

  player1    User @relation("Player1ToGame", fields: [player1Id], references: [id])
  player2    User @relation("Player2ToGame", fields: [player2Id], references: [id])
  winner     User? @relation("WinnerToGame", fields: [winnerId], references: [id])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
}


enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model ChatRoom {
  id        Int       @id @default(autoincrement())
  name      String?
  password  String?
  createdAt DateTime  @default(now())
  messages  Message[]
  users     User[]    @relation("chatroomUser")
  admins         User[]            @relation("chatroomAdmin")
  bannedUsers    User[]            @relation("chatroomBannedUsers")
  mutedUsers     User[]            @relation("chatroomMutedUsers")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  event      String?
  userId     Int
  isInvite   Boolean?
  chatRoomId Int
  createdAt  DateTime @default(now())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
  id       Int  @id @default(autoincrement())
  userId   Int
  friendId Int
  pending  Boolean?   @default(true)
  accepted Boolean?  
  friend   User @relation("Friend_friends", fields: [friendId], references: [id])
  user     User @relation("Friend_users", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model Blocked {
  id        Int  @id @default(autoincrement())
  userId    Int
  blockedId Int
  blocked   User @relation("Blocked_blocked", fields: [blockedId], references: [id])
  user      User @relation("Blocked_users", fields: [userId], references: [id])

  @@unique([userId, blockedId])
}
