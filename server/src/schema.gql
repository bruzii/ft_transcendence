# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChatRoom {
  admins: [User!]
  bannedUsers: [User!]
  createdAt: DateTime
  id: Int
  messages: [Message!]
  mutedUsers: [User!]
  name: String
  password: String
  users: [User!]
}

input CreateUserInput {
  email: String!
  firstName: String!
  intraId: Float!
  lastName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Friend {
  accepted: Boolean
  friend: User
  friendId: Int!
  id: Int!
  pending: Boolean!
  userId: Int!
}

type Game {
  endedAt: DateTime
  id: Int
  player1: User
  player1Id: Int
  player2: User
  player2Id: Int
  scorePlayer1: Int
  scorePlayer2: Int
  startedAt: DateTime
  winner: User
  winnerId: Int
}

type Message {
  chatRoom: ChatRoom
  content: String
  createdAt: DateTime!
  event: String
  id: Int!
  isInvite: Boolean
  user: User
}

type Mutation {
  BanUserFromChatRoom(chatRoomId: Int!, userIdAdmin: Int!, userIdBan: Int!): String!
  MuteUserFromChatRoom(chatRoomId: Int!, userIdAdmin: Int!, userIdMute: Int!): String!
  addFriend(friendId: Float!, id: Int!): Friend!
  addLose(id: Int!): User!
  addUserToChatRoom(chatRoomId: Int!, userId: [Int!]!): ChatRoom!
  addWin(id: Int!): User!
  addXP(id: Int!, xp: Int!): User!
  createChatRoom(friends: [UpdateUserInput!]!, userId: Int!): ChatRoom!
  createGame(playerId1: Int!, playerId2: Int!): Game!
  deleteChatRoom(chatRoomId: Int!, userId: Int!): String!
  finishGame(updateGameInput: UpdateGameInput!): Game!
  launchGame(id: Int!): Game!
  logout: String!
  removeFriend(id: Int!): Friend!
  removeGame(id: Int!): Game!
  removeUser(id: Int!): User!
  setOnline(id: Int!): User!
  signUp(createUserInput: CreateUserInput!): User!
  suppFriend(friendId: Float!, id: Int!): Friend!
  suppXP(id: Int!, xp: Int!): User!
  updateFriend(updateFriendInput: UpdateFriendInput!): Friend!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
  bannedUsersFromChatRoom(adminUserId: Int!, chatRoomId: Int!): [User!]!
  friend(id: Int!): Friend!
  friendByUserId(userId: Int!): [User!]!
  game(id: Int!): Game!
  gameAllForUserPlayer1(id: Int!): [Game!]!
  gameAllForUserPlayer2(id: Int!): [Game!]!
  getAllMessagesFromChatRoom(chatRoomId: Int!, password: String): [Message!]!
  getChatRoomsForUser(userId: Int!): [ChatRoom!]!
  getFriendPrending(userId: Int!): [User!]!
  getMessagesForChatRoom(chatRoomId: Int!): [Message!]!
  getUsers: User
  userAll: [User!]!
  userOne(id: Int!): User!
}

input UpdateFriendInput {
  accepted: Boolean
  friendId: Int!
  id: Int
  pending: Boolean
  userId: Int!
}

input UpdateGameInput {
  endedAt: DateTime
  id: Int!
  player1Id: Float
  player2Id: Float
  scorePlayer1: Float
  scorePlayer2: Float
  winnerId: Float
}

input UpdateUserInput {
  TwoFA: Boolean
  avatar: String
  connected: Boolean
  firstName: String
  id: Int!
  lastName: String
  userName: String
}

type User {
  TwoFA: Boolean!
  avatar: String
  connected: Boolean!
  createdAt: DateTime!
  email: String!
  firstName: String!
  friends: [Friend!]
  id: Int!
  intraId: Float!
  lastName: String!
  lose: Float!
  twoFactorAuthenticationSecret: String!
  userName: String
  win: Float!
  xp: Float!
}